/* ====================== */
/* === CONFIGURAÇÕES ==== */
/* ====================== */
// Arquivo: main.ts - Ponto de entrada da aplicação
import { NestFactory } from '@nestjs/core';
import { AppModule } from './app.module';

async function bootstrap() {
  const app = await NestFactory.create(AppModule);
  await app.listen(3000);
  console.log('Servidor rodando em http://localhost:3000');
}
bootstrap();

/* ====================== */
/* === MÓDULO PRINCIPAL == */
/* ====================== */
// Arquivo: app.module.ts - Organização dos módulos
import { Module } from '@nestjs/common';
import { AuthModule } from './auth/auth.module';
import { PacientesModule } from './pacientes/pacientes.module';

@Module({
  imports: [AuthModule, PacientesModule],
})
export class AppModule {}

/* ====================== */
/* === AUTENTICAÇÃO ===== */
/* ====================== */
// Arquivo: auth/auth.module.ts
import { Module } from '@nestjs/common';
import { JwtModule } from '@nestjs/jwt';
import { AuthController } from './auth.controller';
import { AuthService } from './auth.service';

@Module({
  imports: [
    JwtModule.register({
      secret: 'chave-secreta', // Em produção use variáveis de ambiente
      signOptions: { expiresIn: '1h' },
    }),
  ],
  controllers: [AuthController],
  providers: [AuthService],
})
export class AuthModule {}

// Arquivo: auth/auth.controller.ts
import { Controller, Post, Body } from '@nestjs/common';
import { AuthService } from './auth.service';

@Controller('auth')
export class AuthController {
  constructor(private authService: AuthService) {}

  @Post('login')
  async login(@Body() body: { email: string; senha: string }) {
    const token = await this.authService.validarUsuario(body.email, body.senha);
    return { token };
  }
}

/* ====================== */
/* === PACIENTES ======== */
/* ====================== */
// Arquivo: pacientes/pacientes.module.ts
import { Module } from '@nestjs/common';
import { TypeOrmModule } from '@nestjs/typeorm';
import { Paciente } from './entities/paciente.entity';
import { PacientesController } from './pacientes.controller';
import { PacientesService } from './pacientes.service';

@Module({
  imports: [TypeOrmModule.forFeature([Paciente])],
  controllers: [PacientesController],
  providers: [PacientesService],
})
export class PacientesModule {}

// Arquivo: pacientes/entities/paciente.entity.ts
import { Entity, PrimaryGeneratedColumn, Column } from 'typeorm';

@Entity()
export class Paciente {
  @PrimaryGeneratedColumn()
  id: number;

  @Column()
  nomeCompleto: string;

  @Column({ unique: true })
  cpf: string;

  @Column()
  dataNascimento: Date;
}

/* ====================== */
/* === DTOs ============= */
/* ====================== */
// Arquivo: pacientes/dto/criar-paciente.dto.ts
export class CriarPacienteDto {
  nomeCompleto: string;
  cpf: string;
  dataNascimento: Date;
}

// Arquivo: auth/dto/login.dto.ts
export class LoginDto {
  email: string;
  senha: string;
}

/* ====================== */
/* === SERVIÇOS ========= */
/* ====================== */
// Arquivo: pacientes/pacientes.service.ts
import { Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { Paciente } from './entities/paciente.entity';
import { CriarPacienteDto } from './dto/criar-paciente.dto';

@Injectable()
export class PacientesService {
  constructor(
    @InjectRepository(Paciente)
    private pacientesRepository: Repository<Paciente>,
  ) {}

  async criar(pacienteDto: CriarPacienteDto): Promise<Paciente> {
    const paciente = this.pacientesRepository.create(pacienteDto);
    return this.pacientesRepository.save(paciente);
  }
}

// Arquivo: auth/auth.service.ts
import { Injectable } from '@nestjs/common';
import { JwtService } from '@nestjs/jwt';

@Injectable()
export class AuthService {
  constructor(private jwtService: JwtService) {}

  async validarUsuario(email: string, senha: string): Promise<string> {
    // Simulação - em produção, verifique no banco de dados
    if (email === 'admin@vidaplus.com' && senha === 'senha123') {
      return this.jwtService.sign({ email });
    }
    return null;
  }
}
